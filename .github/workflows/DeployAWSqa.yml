name: CI/CD Pipeline

on:
  push:
    branches:
      - diego  # Cambia 'diego' por la rama correspondiente

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Paso 3: Autenticación en DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Paso 4: Detectar subcarpetas modificadas
      - name: Detect changed microservices
        id: changes
        run: |
          # Verificar si hay un commit previo
          if [ -z "${{ github.event.before }}" ] || ! git cat-file -e ${{ github.event.before }} 2>/dev/null; then
            echo "No previous commit found or invalid SHA. Considering current commit."
            # Si no hay commit previo, trabajamos solo con HEAD
            CHANGED_FILES=$(git diff --name-only HEAD)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi

          echo "Changed files: $CHANGED_FILES"
          
          # Inicializar lista de servicios modificados
          CHANGED_SERVICES=()

          # Recorrer las carpetas de primer nivel (asumimos que cada microservicio está en una subcarpeta)
          for dir in */; do
            if [ -d "$dir" ]; then
              # Verificar si algún archivo dentro de esta carpeta fue modificado
              if echo "$CHANGED_FILES" | grep -q "$dir"; then
                CHANGED_SERVICES+=("$dir")
              fi
            fi
          done

          # Output de servicios modificados a variable de entorno
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "No microservices changed."
            echo "changed_services=" >> $GITHUB_ENV
          else
            echo "Modified services: ${CHANGED_SERVICES[@]}"
            echo "changed_services=${CHANGED_SERVICES[*]}" >> $GITHUB_ENV

      # Paso 5: Construir y desplegar los microservicios modificados
      - name: Build and Deploy changed services
        run: |
          # Iterar sobre los servicios que han cambiado
          for service in ${{ env.changed_services }}; do
            if [ -d "$service" ]; then
              echo "Building and deploying $service..."
              cd $service
              # Usar DOCKER_USERNAME para etiquetar la imagen
              IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${service}:latest"
              docker build -t $IMAGE_NAME .
              docker push $IMAGE_NAME
              cd - || exit
            fi
          done
