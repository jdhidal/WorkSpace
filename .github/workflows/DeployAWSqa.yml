name: CI/CD Pipeline

on:
  push:
    branches:
      - diego

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Authenticate DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Step 1: Detect changes to microservices folders
      - name: Detect changed microservices
        id: changes
        run: |
          # Validate the previous commit
          if [ -z "${{ github.event.before }}" ] || ! git cat-file -e ${{ github.event.before }} 2>/dev/null; then
            echo "No previous commit found or invalid SHA. Considering current commit."
            PREVIOUS_COMMIT="${{ github.sha }}"  # Si no hay commit previo, usamos el actual
          else
            PREVIOUS_COMMIT="${{ github.event.before }}"  # Usamos el commit previo
          fi

          # Detect changes
          CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"
          
          CHANGED_SERVICES=()
          # Verificar cambios en subdirectorios específicos (User-management, etc.)
          for dir in $(find . -type d -maxdepth 2); do
            if echo "$CHANGED_FILES" | grep -q "$dir"; then
              CHANGED_SERVICES+=("$dir")
            fi
          done

          # Salida de los servicios cambiados a la variable de entorno
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "No microservices changed."
            echo "changed_services=" >> $GITHUB_ENV
          else
            echo "Modified services: ${CHANGED_SERVICES[@]}"
            echo "changed_services=${CHANGED_SERVICES[*]}" >> $GITHUB_ENV

      # Step 2: Build and Deploy changed services
      - name: Build and Deploy changed services
        run: |
          # Verificar si hay servicios cambiados
          if [ -z "${{ env.changed_services }}" ]; then
            echo "No services to deploy."
            exit 0
          fi

          # Iterar sobre los servicios cambiados
          IFS=' ' read -r -a SERVICES <<< "${{ env.changed_services }}"
          for service in "${SERVICES[@]}"; do
            if [ -d "$service" ]; then
              echo "Building and deploying $service..."
              cd $service
              # Usar DOCKER_USERNAME para etiquetar la imagen
              IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${service}:latest"
              docker build -t $IMAGE_NAME .
              docker push $IMAGE_NAME
              cd - || exit
            fi
          done
