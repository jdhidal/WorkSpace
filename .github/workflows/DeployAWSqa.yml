name: CI/CD Pipeline

on:
  push:
    branches:
      - diego  # Cambia 'diego' por la rama correspondiente

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v2

      # Paso 2: Configurar Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Paso 3: Autenticación en DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Paso 4: Detectar subcarpetas modificadas
      - name: Detect changed microservices
        id: changes
        run: |
          # Obtener la lista de archivos modificados entre los commits
          if [ -z "${{ github.event.before }}" ] || ! git cat-file -e ${{ github.event.before }} 2>/dev/null; then
            echo "No previous commit found o invalid SHA. Considering current commit."
            CHANGED_FILES=$(git diff --name-only HEAD)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi

          echo "Changed files: $CHANGED_FILES"
          
          # Inicializar lista de servicios modificados
          CHANGED_SERVICES=""

          # Detectar carpetas de nivel 2 modificadas (e.g., USER-MANAGEMENT/Login-User)
          for dir in $(find . -mindepth 2 -maxdepth 2 -type d); do
            # Verificar si algún archivo dentro de la subcarpeta fue modificado
            if echo "$CHANGED_FILES" | grep -q "^${dir:2}/"; then  # :2 elimina prefijo './'
              CHANGED_SERVICES="${CHANGED_SERVICES} ${dir:2}"
            fi
          done

          # Registrar los servicios modificados en la salida
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No microservices changed."
          else
            echo "Modified services: $CHANGED_SERVICES"
          fi

          # Exportar servicios modificados como variable de entorno
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_ENV

      # Paso 5: Construir y desplegar los microservicios modificados
      - name: Build and Deploy changed services
        run: |
          for service in ${{ env.changed_services }}; do
            echo "Building and deploying $service..."
            cd $service
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${service##*/}:latest"  # Eliminar prefijo de la ruta y obtener el nombre del servicio
            docker build -t $IMAGE_NAME .
            docker push $IMAGE_NAME
            cd - || exit
          done
