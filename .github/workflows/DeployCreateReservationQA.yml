name: Build, Push, and Deploy Create Reservation

on:
  push:
    branches: [ "qa" ]
    paths:
      - "RESERVATION-MANAGEMENT/Create-Reservation/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAMEKE }}
        password: ${{ secrets.DOCKERHUB_TOKENKE }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAMEKE }}/create-reservation:latest ./RESERVATION-MANAGEMENT/Create-Reservation/
        docker push ${{ secrets.DOCKERHUB_USERNAMEKE }}/create-reservation:latest

  deploy-aws:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_EC2_KEYKE }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.AWS_EC2_HOSTRESERVATION }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.AWS_EC2_HOSTRESERVATION }} << 'EOF'
        set -e  # Si alg√∫n comando falla, el script se detiene

        echo "üöÄ [1] Actualizando sistema e instalando Docker si es necesario..."
        sudo yum update -y
        command -v docker &> /dev/null || {
          echo "‚ö†Ô∏è Docker no encontrado. Instalando..."
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        }

        echo "üõë [2] Eliminando contenedor anterior si existe..."
        sudo docker stop create-reservation-container || true
        sudo docker rm create-reservation-container || true

        echo "‚¨áÔ∏è [3] Descargando la √∫ltima imagen desde Docker Hub..."
        sudo docker pull ${{ secrets.DOCKERHUB_USERNAMEKE }}/create-reservation:latest

        echo "üîç [4] Verificando conectividad con la base de datos..."
        if ! nc -zv ${{ secrets.DB_HOSTRESERVATION }} ${{ secrets.DB_PORTRESERVATION }}; then
          echo "‚ùå Error: No se pudo conectar a la base de datos en ${{ secrets.DB_HOSTRESERVATION }}:${{ secrets.DB_PORTRESERVATION }}"
          exit 1
        fi

        echo "üöÄ [5] Ejecutando el contenedor..."
        sudo docker run -d --name create-reservation-container \
          -e DB_HOST=${{ secrets.DB_HOSTRESERVATION }} \
          -e DB_PORT=${{ secrets.DB_PORTRESERVATION }} \
          -e DB_USER=${{ secrets.DB_USERRESERVATION }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSRESERVATION }} \
          -e DB_NAME=${{ secrets.DB_NAMERESERVATION }} \
          -p 3010:3010 \
          ${{ secrets.DOCKERHUB_USERNAMEKE }}/create-reservation:latest || {
            echo "‚ùå Error: El contenedor no se pudo iniciar."
            exit 1
          }

        echo "üîç [6] Verificando que el contenedor est√© corriendo..."
        sudo docker ps -a | grep create-reservation-container || {
          echo "‚ùå Error: El contenedor no est√° corriendo."
          sudo docker logs create-reservation-container || echo "No hay logs disponibles."
          exit 1
        }

        echo "üßπ [7] Limpiando im√°genes antiguas..."
        sudo docker image prune -f

        echo "‚úÖ ¬°Despliegue completado exitosamente!"
        EOF
